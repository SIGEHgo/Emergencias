rv_save_state[[btn_id]] <- 0
}
observeEvent({
sapply(ALL_BUTTON_INPUTS, function(id) input[[id]])
}, {
culprit_key <- NULL
for (layer_key in ALL_BUTTON_KEYS) {
btn_id <- paste0(layer_key, "_btn")
current_click_count <- input[[btn_id]]
previous_click_count <- isolate(rv_click_state[[btn_id]])
if (current_click_count > previous_click_count) {
culprit_key <- layer_key
rv_click_state[[btn_id]] <- current_click_count
break
}
}
if (!is.null(culprit_key)) {
current_config <- rv_config$CAPA_CONFIG_DATA[[culprit_key]]
print(current_config)
showModal(config_modal(culprit_key, current_config$name, current_config$color))
colourpicker::updateColourInput(session, paste0("modal_", culprit_key, "_col"), value = current_config$color)
updateSliderInput(session, paste0("modal_", culprit_key, "_size"), value = current_config$size)
}
}, ignoreInit = TRUE)
observeEvent({
sapply(ALL_SAVE_BUTTONS, function(id) input[[id]])
}, {
culprit_key <- NULL
for (layer_key in ALL_BUTTON_KEYS) {
save_btn_id <- paste0("modal_", layer_key, "_save")
current_save_count <- ifelse(is.null(input[[save_btn_id]]),
0,
input[[save_btn_id]])
previous_save_count <- isolate(rv_save_state[[save_btn_id]])
if (current_save_count > previous_save_count) {
culprit_key <- layer_key
rv_save_state[[save_btn_id]] <- current_save_count
break
}
}
if (!is.null(culprit_key)) {
modal_col_id <- paste0("modal_", culprit_key, "_col")
modal_size_id <- paste0("modal_", culprit_key, "_size")
rv_config$CAPA_CONFIG_DATA[[culprit_key]]$color <- input[[modal_col_id]]
rv_config$CAPA_CONFIG_DATA[[culprit_key]]$size <- input[[modal_size_id]]
removeModal()
##Y actualizamos el leafletproxy. No hay que usar más informacion, solo borramos la capa, y la agregamos con el nuevo color
#culprit_key
group=find_parent_input_id(culprit_key)
#Removegroup
proxy = leafletProxy("mapa_principal", session)
proxy |>  clearGroup(group = culprit_key)
#Agregamos grupo
data_para_agregar=rv_config$CAPA_CONFIG_DATA[[culprit_key]]$data
geom_type <- as.character(unique(st_geometry_type(data_para_agregar)))[1]
if (geom_type %in% c("POLYGON", "MULTIPOLYGON")) {
proxy |> addPolygons(data = data_para_agregar, fillColor =input[[modal_col_id]], color = input[[modal_col_id]],weight=input[[modal_size_id]], fillOpacity = 0.7, group = layer_key,popup=popup_general(data_para_agregar) |> as.character())
} else if (geom_type %in% c("LINESTRING", "MULTILINESTRING")) {
proxy |> addPolylines(data = data_para_agregar, color = input[[modal_col_id]],weight=input[[modal_size_id]], opacity = 0.8, group = layer_key,popup=popup_general(data_para_agregar)|> as.character())
} else if (geom_type %in% c("POINT", "MULTIPOINT")) {
proxy |> addCircleMarkers(data = data_para_agregar, radius = input[[modal_size_id]], color = input[[modal_col_id]], fillOpacity = 0.9, group = layer_key,popup=popup_general(data_para_agregar)|> as.character())
}
}
}, ignoreInit = TRUE)
observe({
current_layers <- selected_layers_vector()
previous_layers <- v$selected
proxy = leafletProxy("mapa_principal", session)
layers_to_add = setdiff(current_layers, previous_layers)
layers_to_remove = setdiff(previous_layers, current_layers)
print(layers_to_remove)
for (layer_key in layers_to_remove) {
proxy |>  clearGroup(group = layer_key)
}
successful_layers = setdiff(previous_layers, layers_to_remove)
for (layer_key in layers_to_add) {
#print(rv_config$CAPA_CONFIG_DATA[[layer_key]])
config <- rv_config$CAPA_CONFIG_DATA[[layer_key]]
if (is.null(config)) next
tryCatch({
#load_layer_data(layer_key)
if (rv_config$CAPA_CONFIG_DATA[[layer_key]]$data |> is.null()) {
print("Se lee desde el buig")
print(config$nombre_buig)
data_sf <-st_read(paste0("Inputs/",config$nombre_buig,".geojson")) |> dplyr::filter(!st_is_empty(geometry)) #load_layer_data(buig = buig,
#               nombre_buig =  config$nombre_buig,
#              columnas_interes = config$cols,
#             custom_filter = ifelse(config$custom_filter |> is.null(),'',config$custom_filter))###Aqui se ve a cambiar por la función custom de dplyr.
rv_config$CAPA_CONFIG_DATA[[layer_key]]$data <- data_sf
} else {
print("Se lee desde local ")
data_sf <- rv_config$CAPA_CONFIG_DATA[[layer_key]]$data
}
geom_type <- as.character(unique(st_geometry_type(data_sf)))[1]
if (geom_type %in% c("POLYGON", "MULTIPOLYGON")) {
proxy |> addPolygons(data = data_sf, fillColor = rv_config$CAPA_CONFIG_DATA[[layer_key]]$color, color = "black", weight = rv_config$CAPA_CONFIG_DATA[[layer_key]]$size, fillOpacity = 0.7, group = layer_key,popup=popup_general(data_sf)|> as.character())
} else if (geom_type %in% c("LINESTRING", "MULTILINESTRING")) {
proxy |> addPolylines(data = data_sf, color = rv_config$CAPA_CONFIG_DATA[[layer_key]]$color, weight = rv_config$CAPA_CONFIG_DATA[[layer_key]]$size, opacity = 0.8, group = layer_key,popup=popup_general(data_sf)|> as.character())
} else if (geom_type %in% c("POINT", "MULTIPOINT")) {
proxy |> addCircleMarkers(data = data_sf, radius = rv_config$CAPA_CONFIG_DATA[[layer_key]]$size, color = rv_config$CAPA_CONFIG_DATA[[layer_key]]$color, fillOpacity = 0.9, group = layer_key,popup=popup_general(data_sf)|> as.character())
}
successful_layers <- c(successful_layers, layer_key)
}, error = function(e) {
print(paste("ERROR:", e$message))
showNotification(
ui = HTML(paste("<strong>Error de Carga:</strong> No se pudo cargar la capa <b>", config$nombre_buig, "</b>.",
"Por favor, verifique la conexión o el nombre de la tabla. ")),
type = "error",
duration = 2
)
parent_input_id <- find_parent_input_id(layer_key)
if (!is.null(parent_input_id)) {
current_selection_in_group <- input[[parent_input_id]]
new_selection <- current_selection_in_group[current_selection_in_group != layer_key]
updateCheckboxGroupInput(session, parent_input_id, selected = new_selection)
}
})
}
v$selected <- successful_layers %>% unique()
}) # Fin del observe
}
shinyApp(ui, server)
runApp('C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/Emergencias')
runApp('C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/Emergencias')
runApp('C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/Emergencias')
library(shiny)
library(bslib)
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(sf)
library(shinybusy)
library(colourpicker)
CAPA_CONFIG <- list(
# [tipo_geom, group_name, nombre_buig]
## Grupo 0: Afectaciones registradas.
'g0_c1'=list(tipo_geom="POINT", group="Afectaciones registradas", nombre_buig="afectaciones_metztitlan_puntos", cols=c(""), data = NULL,color = "#A30C06", size = 5, name = "Afectaciones en puntos"),  # Municipios,
'g0_c2'=list(tipo_geom="LINESTRING", group="Afectaciones registradas", nombre_buig="afectaciones_metztitlan_lineas", cols=c(""), data = NULL,color = "#A30C06", size = 2, name = "Afectaciones en tramo"),  # Municipios,
## Grupo 1: Desagregación geográfica
'g1_c1' = list(tipo_geom="POLYGON", group="Desagregación geográfica", nombre_buig="limite_municipal_simple", cols=c("cvegeo", "nomgeo", "the_geom"), data = NULL,color = "steelblue", size = 2, name = "Municipios"),  # Municipios
'g1_c2' = list(tipo_geom="POLYGON", group="Desagregación geográfica", nombre_buig="agebs_simple", cols=c("cve_ent", "cve_mun", "cve_loc", "cve_ageb", "pob1", "geom"), data = NULL,color = "steelblue", size = 2, name = "AGEB"),  # AGEB
'g1_c3' = list(tipo_geom="POLYGON", group="Desagregación geográfica", nombre_buig="loc_urb_simple", cols=c("nomgeo", "cabecera", "cve_mun", "cve_loc", "pob1", "geom"), data = NULL,color = "#DED1A9", size = 2, name = "Localidad Urbana"),  # Localidad Urbana
'g1_c4' = list(tipo_geom="POLYGON", group="Desagregación geográfica", nombre_buig="loc_rur_simple", cols=c("nomgeo", "nom_ent", "pob1", "geom"), data = NULL,color = "#DE924B", size = 2),  # Localidad Rural
'g1_c5' = list(tipo_geom="POLYGON", group="Desagregación geográfica", nombre_buig="regiones_simple", cols=c("region", "the_geom"), data = NULL,color = "#BAB9B6", size = 2),  # Regiones
## Grupo 2: Capas de Salud
'g2_c1' = list(tipo_geom="POINT", group="Infraestructura de Salud", nombre_buig='13salud', cols=c("nombre", "unidad", "admin","geom"), data = NULL,color = "red", size = 2), # Centros de Salud
'g2_c2' = list(tipo_geom="POLYGON", group="Infraestructura de Salud", nombre_buig="hospitales_hgo_gral", cols=c("name", "area", "geom"), data = NULL,color = "red", size = 15),  # Hospital General
'g2_c3' = list(tipo_geom="POLYGON", group="Infraestructura de Salud", nombre_buig="hospitales_hgo_reg", cols=c("name", "area", "geom"), data = NULL,color = "red", size = 15),  # Hospital regional
## Grupo 3: Recursos Hídricos
'g3_c1' = list(tipo_geom="LINESTRING", group="Recursos Hídricos", nombre_buig="canales", cols=c("identifica", "condicion", "geom"), data = NULL,color = "steelblue", size = 15),  # Canales
'g3_c2' = list(tipo_geom="POINT", group="Recursos Hídricos", nombre_buig="Pozos_de_Estado_de_Hidalgo", cols=c("nombre","tipo", "geom"), data = NULL,color = "#00D9FA", size = 2),  # Pozos
'g3_c3' = list(tipo_geom="LINESTRING", group="Recursos Hídricos", nombre_buig="rios", cols=c("nombre", "condicion", "st_length_", "geom"), data = NULL,color = "steelblue", size = 2), # Ríos
'g3_c4' = list(tipo_geom="POINT", group="Recursos Hídricos", nombre_buig="manantiales_50_inegi", cols=c("nom_man", "geom"), data = NULL,color = "#0003DB", size = 2),  # Manantiales
'g3_c5' = list(tipo_geom="POLYGON", group="Recursos Hídricos", nombre_buig="cuerpos_de_agua", cols=c("condicion", "shape_leng", "shape_area","geom"), data = NULL,color = "#0000FF", size = 3),  # Cuerpos de Agua
'g3_c6' = list(tipo_geom="POINT", group="Recursos Hídricos", nombre_buig="Estructuras_elevadas", cols=c("geografico","tipo","geom"), data = NULL,color = "black", size = 1),  # Oficina
## Grupo 4: Zonificación de Vulnerabilidad
# g4_c5 simula un error de carga para demostrar el manejo de excepciones.
'g4_c1' = list(tipo_geom="POLYGON", group="Zonificación de Vulnerabilidad", nombre_buig="peligro_por_caida_de_bloques", cols=c("tipo","geom"), data = NULL,color = "red", size = 3),  # Caida de bloques
'g4_c2' = list(tipo_geom="POLYGON", group="Zonificación de Vulnerabilidad", nombre_buig="zonificacion_de_vulnerabilidad_y_areas_susceptibles_a_deslizami", cols=c("tipo", "geom"), data = NULL,color = "red", size = 3),  # Suceptibles a deslizamiento
'g4_c3' = list(tipo_geom="POLYGON", group="Zonificación de Vulnerabilidad", nombre_buig="zonificacion_de_vulnerabilidad_y_areas_susceptibles_a_hundimien", cols=c("peligro", "geom"), data = NULL,color = "#A68F98", size = 3),  # Hundimiento
'g4_c4' = list(tipo_geom="LINESTRING", group="Zonificación de Vulnerabilidad", nombre_buig="estructuras_geologicas", cols=c("entidad", "geom"), data = NULL,color = "#52303C", size = 3),  # Fallas geológicas
'g4_c5' = list(tipo_geom="POLYGON", group="Zonificación de Vulnerabilidad", nombre_buig="inundacion", cols=c("objectid", "geom"), data = NULL,color = "steelblue", size = 3), # Zonas de Inundación
'g4_c6' = list(tipo_geom="POINT", group="Zonificación de Vulnerabilidad", nombre_buig="PRIORIDAD_ESCUELAS", cols=c('claveseph','Nombre_d_1','LOCALIDAD','MUNICIPIO','total', "geom"), data = NULL,color = "red", size = 3), # Escuelas en riesgo
## Grupo 5: Infraestructura Vial
'g5_c1' = list(tipo_geom="POINT", group="Infraestructura Vial", nombre_buig="puentes_hgo", cols=c("tipo", "nombre", "altura", "ancho", "geom"), data = NULL),  # Estructuras Viales
'g5_c2' = list(tipo_geom="LINESTRING", group="Infraestructura Vial", nombre_buig="red_carretera_sipdus_federal", cols=c("administra", "nombre", "cond_pav", "recubri", "carriles", "circula", "velocidad","geom"), data = NULL,custom_filter='Federal',color = "black", size = 1), # Carreteras Federales
'g5_c3' = list(tipo_geom="LINESTRING", group="Infraestructura Vial", nombre_buig="red_carretera_sipdus_estatal", cols=c("administra", "nombre", "cond_pav", "recubri", "carriles", "circula", "velocidad","geom"), data = NULL,custom_filter='Estatal',color = "black", size = 1),  # Carreteras Estatales
'g5_c4' = list(tipo_geom="LINESTRING", group="Infraestructura Vial", nombre_buig="red_carretera_sipdus_municipal", cols=c("administra", "nombre", "cond_pav", "recubri", "carriles", "circula", "velocidad","geom"), data = NULL,custom_filter='Municipal',color = "black", size = 1),  # Carreteras Municipales
## Grupo 6: Otra Infraestructura
'g6_c1' = list(tipo_geom="POINT", group="Otra Infraestructura", nombre_buig="subestacion_electrica", cols=c("geografico", "nombre", "condicion",'geom'), data = NULL,color = "#BDAF35", size = 3),  # Estaciones eléctricas
'g6_c2' = list(tipo_geom="POINT", group="Otra Infraestructura", nombre_buig="oficinas_nacionales", cols=c("nom_estab", "municipio","localidad", "geom"), data = NULL,color = "#074721", size = 2),  # Oficina
'g6_c3' = list(tipo_geom="POINT", group="Otra Infraestructura", nombre_buig="oficinas_estatales", cols=c("nom_estab", "geom"), data = NULL,color = "#621132", size = 2),  # Oficina
'g6_c4' = list(tipo_geom="POINT", group="Otra Infraestructura", nombre_buig="oficinas_municipales", cols=c("nom_estab", "municipio","localidad","geom"), data = NULL,color = "#621132", size = 2),  # Oficina
'g6_c5' = list(tipo_geom="POINT", group="Otra Infraestructura", nombre_buig="oficinas_regionales", cols=c("nom_estab", "municipio","localidad", "geom"), data = NULL,color = "#621132", size = 2),  # Oficina
## Grupo 7: Puntos de Reunión y Centros de Acopio
'g7_c1' = list(tipo_geom="POINT", group="Puntos de Reunión y Centros de Acopio", nombre_buig="centros_de_acopio", cols=c("nom_estab", "tipo", "geom"), data = NULL,color = "#AE8E5D", size = 2),  # Centros de Acopio
'g7_c2' = list(tipo_geom="POINT", group="Puntos de Reunión y Centros de Acopio", nombre_buig="albergues_y_refugios", cols=c("nom_mun", "colonia", "nombre", "registr", "anio", "ambito","geom"), data = NULL,color = "#AE8E5D", size = 2), # Albergues
'g7_c3' = list(tipo_geom="POINT", group="Puntos de Reunión y Centros de Acopio", nombre_buig="comedores_comunitarios_en_operacion", cols=c("tipo_educa", "nivel_educ", "nombre_d_4", "mun", "loc", "nom_plante", "nom_comedo", "geom"), data = NULL,color = "#621132", size = 2),  # Comedores Comunitarios
'g7_c4' = list(tipo_geom="POINT", group="Puntos de Reunión y Centros de Acopio", nombre_buig="escuelas_seph_2025", cols=c("nom_centro", "nom_turno", "tipo", "nivel_educ", "servicio_e", "nom_mun", "nom_loc", "colonia","geom"), data = NULL,color = "steelblue", size = 2),  # Escuelas
'g7_c5' = list(tipo_geom="POINT", group="Puntos de Reunión y Centros de Acopio", nombre_buig="universidades_estatales", cols=c("name", "unv_inst", "geom"), data = NULL,color = "#621132", size = 2),  # Universidades Estatales
'g7_c6' = list(tipo_geom="POINT", group="Puntos de Reunión y Centros de Acopio", nombre_buig="caics_2024", cols=c("name", "popupinfo", "geom"), data = NULL,color = "#621132", size = 2) , # Centros de Atención Infantil Comunitaria (CAIC)
'g7_c7' = list(tipo_geom="POINT", group="Puntos de Reunión y Centros de Acopio", nombre_buig="tiendas_diconsa", cols=c("municipio", "localidad", 'direccion',"geom"), data = NULL,color = "#621132", size = 2)  # tiendas_diconsa
)
CAPA_CONFIG[['g5_c1']]$custom_filter
load_layer_data =function(buig, nombre_buig = "Estructuras_elevadas", columnas_interes = c("geografico", "tipo", "geom"),
columna_filtrar = "", custom_filter = "") {
datos = dplyr::tbl(buig, nombre_buig) |> dplyr::select(all_of(columnas_interes))
if("the_geom"%in%columnas_interes){
datos=datos |> dplyr::rename(geom=the_geom)
}
if (columna_filtrar != "" && custom_filter != "") {
#datos = datos |> dplyr::filter(!!dplyr::sym(columna_filtrar) == custom_filter)
datos = datos |> dplyr::filter(grepl(custom_filter, !!dplyr::sym(columna_filtrar)))
}
datos = datos |> dplyr::collect() |> dplyr::mutate(geom = sf::st_as_sfc(geom, EWKB = TRUE))
coordenadas = sf::st_coordinates(datos$geom[1])[1,1]
if (coordenadas > 30) {
datos = datos |> sf::st_as_sf(crs = 32614) |> sf::st_transform(crs = 4326) |> sf::st_zm()
} else {
datos = datos |> sf::st_as_sf(crs = 4326) |> sf::st_zm()
}
return(datos)
}
View(CAPA_CONFIG)
CAPA_CONFIG[["g0_c1"]][["nombre_buig"]]
lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]])
lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist()
lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist() |>  character()
lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist() |>  as.character()
lista_interes = lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist() |>  as.character()
buig <- pool::dbPool(
drv = RPostgres::Postgres(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
db_host = 'sigmapdb.csedvatdfhkw.us-west-2.rds.amazonaws.com'
db_user = 'geo_citnova'
db_pass = "Password2025"
db_port = 5432
db_name = 'geo_citnova'
buig <- pool::dbPool(
drv = RPostgres::Postgres(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
onStop(function() {
print("Desconexion del servidor")
pool::poolClose(buig)
print(buig)
})
Lista_BUIG= pool::dbListTables(buig) |> as.list()
lista_interes = lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist() |>  as.character()
Lista_BUIG= pool::dbListTables(buig) |> as.list()
lista_interes = lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist() |>  as.character()
Lista_BUIG = Lista_BUIG = Lista_BUIG[Lista_BUIG %in% lista_interes]
View(CAPA_CONFIG)
CAPA_CONFIG[["g0_c2"]]
CAPA_CONFIG[["g7_c7"]]
CAPA_CONFIG[["g7_c2"]]
buig <- pool::dbPool(
drv = RPostgres::Postgres(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
onStop(function() {
print("Desconexion del servidor")
pool::poolClose(buig)
print(buig)
})
Lista_BUIG= pool::dbListTables(buig) |> as.list()
lista_interes = lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist() |>  as.character()
Lista_BUIG = Lista_BUIG = Lista_BUIG[Lista_BUIG %in% lista_interes]
View(Lista_BUIG)
Lista_BUIG[[24]]
Lista_BUIG
lista_interes
source("../Scripts/db_con_act.R")
source("../Scripts/db_con_act.R")
db_host
source("../Scripts/db_con_act.R")
View(buig)
View(buig)
nuig
buig
runApp()
runApp('C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/Emergencias')
runApp('C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/Emergencias')
runApp('C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/Emergencias')
library(pool)
runApp('C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/Emergencias')
archivos = list.files(path = "../Inputs/", pattern = "\\.geojson", all.files = T, full.names = T, recursive = T)
archivos
datos = sf::read_sf(archivos[1])
View(datos)
nombres = basename(archivos) |>  gsub(pattern = ".geojson", replacement = "") |>  stringr::str_squish()
con = DBI::dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres",
password = "SIGEH2025"
)
archivos = list.files(path = "../Inputs/", pattern = "\\.geojson", all.files = T, full.names = T, recursive = T)
nombres = basename(archivos) |>  gsub(pattern = ".geojson", replacement = "") |>  stringr::str_squish()
for (i in 1:length(nombres)) {
datos = sf::read_sf(archivos[i])
DBI::dbWriteTable(
con,
Id(schema = "descancito", table = nombres[i]),
datos,
append = TRUE,
row.names = FALSE
)
}
library(DBI)
for (i in 1:length(nombres)) {
datos = sf::read_sf(archivos[i])
DBI::dbWriteTable(
con,
Id(schema = "descancito", table = nombres[i]),
datos,
append = TRUE,
row.names = FALSE
)
}
con = DBI::dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres",
password = "SIGEH2025"
)
archivos = list.files(path = "../Inputs/", pattern = "\\.geojson", all.files = T, full.names = T, recursive = T)
nombres = basename(archivos) |>  gsub(pattern = ".geojson", replacement = "") |>  stringr::str_squish()
for (i in seq_along(nombres)) {
datos = sf::read_sf(archivos[i])
sf::st_write(
obj = datos,
dsn = con,
layer = DBI::Id(schema = "descancito", table = nombres[i]),
append = FALSE  # FALSE = crea una tabla nueva
)
}
con = DBI::dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres",
password = "SIGEH2025"
)
archivos = list.files(path = "../Inputs/", pattern = "\\.geojson", all.files = T, full.names = T, recursive = T)
nombres = basename(archivos) |>  gsub(pattern = ".geojson", replacement = "") |>  stringr::str_squish()
nombres
for (i in seq_along(nombres)) {
datos = sf::read_sf(archivos[i])
sf::st_write(
obj = datos,
dsn = con,
layer = DBI::Id(schema = "descancito", table = nombres[i]),
append = FALSE  # FALSE = crea una tabla nueva
)
cat("Se acaba de finalizar:", nombres[i], "\n")
}
load_layer_data_ver2 = function(buig, nombre_buig = "Estructuras_elevadas") {
datos = dplyr::tbl(buig, nombre_buig)
if ("the_geom" %in% names(datos)) {
datos = datos |> dplyr::rename(geom = the_geom)
} else if ("geometry" %in% names(datos)) {
datos = datos |> dplyr::rename(geom = geometry)
}
datos = datos |> dplyr::collect() |> dplyr::mutate(geom = sf::st_as_sfc(geom, EWKB = TRUE))
coordenadas = sf::st_coordinates(datos$geom[1])[1,1]
if (coordenadas > 30) {
datos = datos |> sf::st_as_sf(crs = 32614) |> sf::st_transform(crs = 4326) |> sf::st_zm()
} else {
datos = datos |> sf::st_as_sf(crs = 4326) |> sf::st_zm()
}
return(datos)
}
lista_interes = lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist() |>  as.character()
lista_interes
View(CAPA_CONFIG)
Lista_BUIG= pool::dbListTables(buig) |> as.list()
db_host = 'localhost'
db_user = 'postgres'
db_pass = "SIGEH2025"
db_port = 5432
db_name = 'postgres'
buig <- pool::dbPool(
drv = RPostgres::Postgres(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
onStop(function() {
print("Desconexion del servidor")
pool::poolClose(buig)
print(buig)
})
# # # Obtener las variables de entorno para la conexión
# db_host <- Sys.getenv("db_host")
# db_user <- Sys.getenv("db_user")
# db_pass <- Sys.getenv("db_pass")
# db_port <- as.numeric(Sys.getenv("db_port")) # Asegúrate de convertir el puerto a numérico
# db_name <- Sys.getenv("db_name")
library(pool)
onStop(function() {
print("Desconexion del servidor")
pool::poolClose(buig)
print(buig)
})
# # # Obtener las variables de entorno para la conexión
# db_host <- Sys.getenv("db_host")
# db_user <- Sys.getenv("db_user")
# db_pass <- Sys.getenv("db_pass")
# db_port <- as.numeric(Sys.getenv("db_port")) # Asegúrate de convertir el puerto a numérico
# db_name <- Sys.getenv("db_name")
library(pool)
library(dbplyr)
library(shiny)
library(dplyr)
db_host = 'localhost'
db_user = 'postgres'
db_pass = "SIGEH2025"
db_port = 5432
db_name = 'postgres'
buig <- pool::dbPool(
drv = RPostgres::Postgres(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
onStop(function() {
print("Desconexion del servidor")
pool::poolClose(buig)
print(buig)
})
Lista_BUIG= pool::dbListTables(buig) |> as.list()
Lista_BUIG
dbExecute(con, "set search_path to descancito;")
Lista_BUIG = pool::dbListTables(buig) |> as.list()
Lista_BUIG
buig <- pool::dbPool(
drv = RPostgres::Postgres(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
onStop(function() {
print("Desconexion del servidor")
pool::poolClose(buig)
print(buig)
})
dbExecute(con, "set search_path to descancito;")
Lista_BUIG = pool::dbListTables(buig) |> as.list()
Lista_BUIG
pool::dbExecute(con, "set search_path to descancito;")
Lista_BUIG = pool::dbListTables(buig) |> as.list()
Lista_BUIG
db_host = 'localhost'
db_user = 'postgres'
db_pass = "SIGEH2025"
db_port = 5432
db_name = 'postgres'
buig <- pool::dbPool(
drv = RPostgres::Postgres(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
onStop(function() {
print("Desconexion del servidor")
pool::poolClose(buig)
print(buig)
})
pool::dbExecute(con, "set search_path to descancito;")
pool::dbDisconnect()
pool::dbDisconnect(buig)
pool::dbDisconnect(buig)
library(dbplyr)
# # # Obtener las variables de entorno para la conexión
# db_host <- Sys.getenv("db_host")
# db_user <- Sys.getenv("db_user")
# db_pass <- Sys.getenv("db_pass")
# db_port <- as.numeric(Sys.getenv("db_port")) # Asegúrate de convertir el puerto a numérico
# db_name <- Sys.getenv("db_name")
library(pool)
library(shiny)
db_port = 5432
db_user = 'postgres'
db_host = 'localhost'
db_name = 'postgres'
db_pass = "SIGEH2025"
buig <- pool::dbPool(
drv = RPostgres::Postgres(),
dbname = db_name,
host = db_host,
port = db_port,
user = db_user,
password = db_pass
)
onStop(function() {
print("Desconexion del servidor")
pool::poolClose(buig)
print(buig)
})
Lista_BUIG = pool::dbListTables(buig) |> as.list()
Lista_BUIG
Lista_BUIG = pool::dbListTables(buig) |> as.list()
lista_interes = lapply(CAPA_CONFIG, function(x) x[["nombre_buig"]]) |>  unlist() |>  as.character()
Lista_BUIG = Lista_BUIG[Lista_BUIG %in% lista_interes]
Lista_BUIG
